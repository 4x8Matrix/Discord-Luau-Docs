---
import type { Props as AstroProps } from "@astrojs/starlight/props";
import LuaTypeComponent from "./LuaType.astro";
import type { LuaType, LuaParam } from "./utils/lua";
import { typeOrDefault, getTypeDocs } from "./utils/lua";

type Props = AstroProps & {
    name: string;
    isMethod: boolean;
    className: string;
    args: LuaParam[];
    returnType?: LuaType | string;
};

const { name, className, args, returnType, isMethod } = Astro.props;
const returnTypeOrDefault = typeOrDefault(returnType);
const returnTypeUrl = getTypeDocs(returnTypeOrDefault);
---

<div class="declaration">
    <span class="declaration class">{className}</span>
    <span class="declaration">{(isMethod && ":") || "."}</span>
    <span class="declaration method">{name}</span>
    <span class="declaration">(</span>
    <div class="declaration">
        {
            args.map(({ name, type }) => {
                const defaultedType = typeOrDefault(type);
                const typeUrl = getTypeDocs(defaultedType);
                
                let unionTypes: any[] | null = [];
                if (type.includes("|")) {
                    const unionMembers = defaultedType.split("|");
                    unionTypes = unionMembers.map((unionType: string, count: number) => {
                        unionType = unionType.trim();
                        const unionTypeUrl = getTypeDocs(unionType)

                        return (
                            <>
                                <LuaTypeComponent url={unionTypeUrl} type={unionType} />
                                {count !== unionMembers.length - 1 && (
                                    <br/>
                                    <span>{"\u00A0".repeat(22)}|</span>
                                ) || ""}
                            </>
                        )
                    })
                } else {
                    unionTypes = null
                }

                return (
                    <>
                        <br />
                        <span class="declaration arg">
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{name}:
                        </span>
                        <span class="declaration type">
                            {unionTypes && unionTypes || (<LuaTypeComponent url={typeUrl} type={defaultedType} />)}
                        </span>
                        <span class="declaration" />
                    </>
                );
            })
        }
    </div>
    <span class="declaration">)</span>
    <span class="declaration type"
        >&nbsp;{"-> "}
        <LuaTypeComponent url={returnTypeUrl} type={returnTypeOrDefault} />
    </span>
</div>
