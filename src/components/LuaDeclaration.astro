---
import type { Props as AstroProps } from "@astrojs/starlight/props";

type LuaParam = {
    name: string;
    type: string;
};

type Props = AstroProps & {
    name: string;
    isMethod: boolean;
    className: string;
    args: LuaParam[];
};

const { name, className, args, isMethod } = Astro.props;

const START_BLOCK_CHAR = "{"
const END_BLOCK_CHAR = "}"
const END_VALUE_CHAR = ","
const KEY_VALUE_SPLITTER = ":"

function parseLuaTable(block: string, index: number, blockIndex: number) {
    var luaTableMap = new Map()
    var eof = false;

    var buffer = ""
    var key = ""

    index += 1

    while (!eof) {
        var charAtIndex = block.at(index)

        if (charAtIndex == START_BLOCK_CHAR) {
            luaTableMap.set("&nbsp;" + key.trim(), parseLuaTable(block, index, blockIndex + 1))
        } else if (charAtIndex == END_BLOCK_CHAR) {
            eof = true
            luaTableMap.set("&nbsp;" + key.trim(), buffer.trim())
        } else if (charAtIndex == END_VALUE_CHAR) {
            luaTableMap.set("&nbsp;" + key.trim(), buffer.trim())
            buffer = ""
        } else if (charAtIndex == KEY_VALUE_SPLITTER) {
            key = buffer
            buffer = ""
        } else {
            buffer += charAtIndex
        }

        index += 1

        if (index >= block.length) {
            eof = true
        }
    }

    return luaTableMap
}

function parseType(block: string) {
    var result = []

    if (block.startsWith(START_BLOCK_CHAR)) {
        result[0] = "{"

        var luaMap = parseLuaTable(block, 0, 0)

        luaMap.forEach((value, key) => {
            result[result.length + 1] = key + ": " + value + ","
        })
       
        result[result.length + 1] = "}"
    } else {
        result[0] = block
    }

    return result
}

---

<div class="declaration">
    <span class="declaration class">{className}</span>
    <span class="declaration">{isMethod && ":" || "."}</span>
    <span class="declaration method">{name}</span>
    <span class="declaration">(</span>
    <div class="declaration">
        {
            args.map(({ name, type }, count) => {
                return (
                    <>
                        <br />
                        <span class="declaration arg">
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{name}:
                        </span>

                        {
                            parseType(type).map((value, count) => {
                                return (
                                    <>
                                        {(count != 0 && <br />)}
                                        
                                        <span class="declaration type">{value}</span>
                                    </>
                                )
                            })
                        }

                        <span>
                            {(count !== args.length - 1 && ",") || <br />}
                        </span>
                    </>
                );
            })
        }
    </div>
    <span class="declaration">)</span>
</div>

<!-- </div> -->

<style>
    span.declaration {
        font-size: 19px;
        font-family: monospace;
    }

    div.declaration {
        font-size: 0;
        /* background-color: #23262f; */
        border-radius: 2%;
        padding: 1%;
    }

    .method {
        color: #b0d86f;
    }

    .class {
        color: #ffcb8b;
    }

    .arg {
        color: #7bdbca;
    }

    .type {
        color: #82aadd;
    }
</style>
